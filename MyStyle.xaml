<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:脸滚键盘" xmlns:hc="https://handyorg.github.io/handycontrol">

    <Style x:Key="BookTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Opacity="0.6" SnapsToDevicePixels="True" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0,0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}" >
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition MinHeight="30"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.Margin>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <hc:TreeViewItemMarginConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </Grid.Margin>
                                <ContentPresenter x:Name="PART_Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <ToggleButton x:Name="Expander" Margin="0,0,0,0" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Right">
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="Width" Value="16"/>
                                            <Setter Property="Height" Value="16"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border Background="Transparent" Height="16" Padding="4" Width="16">
                                                            <Path x:Name="ExpandPath" Data="M508.89325,762.93166 A65.039498,65.039498,0,0,1,462.47259,743.44582 L97.125746,371.00402 C71.982728,345.3697 72.372878,304.18717 98.007197,279.04415 123.65597,253.87946 164.81682,254.29851 189.96706,279.92561 L508.90047,605.05084 827.83388,279.92561 A65.025048,65.025048,0,0,1,920.6752,371.00402 L555.31391,743.44582 A65.025048,65.025048,0,0,1,508.89325,762.93166 z" Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TreeViewItem}}}" RenderTransformOrigin="0.5,0.5" Stretch="Uniform">
                                                                <Path.RenderTransform>
                                                                    <RotateTransform Angle="-90"/>
                                                                </Path.RenderTransform>
                                                            </Path>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                                                    <Setter.Value>
                                                                        <RotateTransform Angle="0"/>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" SourceName="Bd" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource PrimaryBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsSelectionActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource DarkDefaultBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FF6D6D6D"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.BasedOn>
            <Style TargetType="{x:Type Control}">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle RadiusY="4" RadiusX="4">
                                            <Rectangle.Style>
                                                <Style TargetType="{x:Type Rectangle}">
                                                    <Setter Property="Margin" Value="-2"/>
                                                    <Setter Property="Opacity" Value="0.6"/>
                                                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                    <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                    <Setter Property="StrokeThickness" Value="2"/>
                                                    <Setter Property="StrokeDashArray" Value="1 1"/>
                                                </Style>
                                            </Rectangle.Style>
                                        </Rectangle>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
    </Style>
    <Style x:Key="BookTreeViewStyle" TargetType="{x:Type TreeView}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="hc:ScrollViewer.IsInertiaEnabled" Value="True"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <hc:ToggleBlock HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="Stretch" Margin="0,0,0,200">
                            <hc:ToggleBlock.CheckedContent>
                                <hc:ScrollViewer x:Name="_tv_scrollviewer_" Background="{TemplateBinding Background}" CanContentScroll="False" Focusable="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" IsInertiaEnabled="{Binding (hc:ScrollViewer.IsInertiaEnabled), RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                    <hc:ScrollViewer.Template>
                                        <ControlTemplate TargetType="{x:Type hc:ScrollViewer}">
                                            <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" Grid.ColumnSpan="2" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0" Grid.RowSpan="2"/>
                                                <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}">
                                                    <ScrollBar.Style>
                                                        <Style TargetType="{x:Type ScrollBar}">
                                                            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
                                                            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                            <Setter Property="Background" Value="Transparent"/>
                                                            <Setter Property="Focusable" Value="False"/>
                                                            <Setter Property="BorderThickness" Value="0"/>
                                                            <Setter Property="Width" Value="8"/>
                                                            <Setter Property="MinWidth" Value="8"/>
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                                                                        <hc:SimplePanel x:Name="Bg" SnapsToDevicePixels="True">
                                                                            <Border Background="{TemplateBinding Background}"/>
                                                                            <Track x:Name="PART_Track" IsDirectionReversed="True" IsEnabled="{TemplateBinding IsMouseOver}">
                                                                                <Track.DecreaseRepeatButton>
                                                                                    <RepeatButton Command="ScrollBar.PageUpCommand">
                                                                                        <RepeatButton.Style>
                                                                                            <Style TargetType="{x:Type RepeatButton}">
                                                                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                                                <Setter Property="Background" Value="Transparent"/>
                                                                                                <Setter Property="Focusable" Value="False"/>
                                                                                                <Setter Property="IsTabStop" Value="False"/>
                                                                                                <Setter Property="Template">
                                                                                                    <Setter.Value>
                                                                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                                                            <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                                                                        </ControlTemplate>
                                                                                                    </Setter.Value>
                                                                                                </Setter>
                                                                                            </Style>
                                                                                        </RepeatButton.Style>
                                                                                    </RepeatButton>
                                                                                </Track.DecreaseRepeatButton>
                                                                                <Track.IncreaseRepeatButton>
                                                                                    <RepeatButton Command="ScrollBar.PageDownCommand">
                                                                                        <RepeatButton.Style>
                                                                                            <Style TargetType="{x:Type RepeatButton}">
                                                                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                                                <Setter Property="Background" Value="Transparent"/>
                                                                                                <Setter Property="Focusable" Value="False"/>
                                                                                                <Setter Property="IsTabStop" Value="False"/>
                                                                                                <Setter Property="Template">
                                                                                                    <Setter.Value>
                                                                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                                                            <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                                                                        </ControlTemplate>
                                                                                                    </Setter.Value>
                                                                                                </Setter>
                                                                                            </Style>
                                                                                        </RepeatButton.Style>
                                                                                    </RepeatButton>
                                                                                </Track.IncreaseRepeatButton>
                                                                                <Track.Thumb>
                                                                                    <Thumb Background="{TemplateBinding Foreground}">
                                                                                        <Thumb.Style>
                                                                                            <Style TargetType="{x:Type Thumb}">
                                                                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                                                <Setter Property="IsTabStop" Value="False"/>
                                                                                                <Setter Property="Template">
                                                                                                    <Setter.Value>
                                                                                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                                                                                            <ControlTemplate.Resources>
                                                                                                                <Storyboard x:Key="Storyboard2">
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="2"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-2"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                                <Storyboard x:Key="Storyboard1">
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="8"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </ControlTemplate.Resources>
                                                                                                            <Border Background="Transparent" Width="{TemplateBinding Width}">
                                                                                                                <Rectangle x:Name="rectangle" Fill="{TemplateBinding Background}" HorizontalAlignment="Right" Height="{TemplateBinding Height}" RadiusY="1" RadiusX="1" SnapsToDevicePixels="True" Width="2">
                                                                                                                    <Rectangle.RenderTransform>
                                                                                                                        <TransformGroup>
                                                                                                                            <TranslateTransform X="-2"/>
                                                                                                                        </TransformGroup>
                                                                                                                    </Rectangle.RenderTransform>
                                                                                                                </Rectangle>
                                                                                                            </Border>
                                                                                                            <ControlTemplate.Triggers>
                                                                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                                                                    <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource SecondaryTextBrush}"/>
                                                                                                                </Trigger>
                                                                                                                <Trigger Property="IsDragging" Value="True">
                                                                                                                    <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource PrimaryTextBrush}"/>
                                                                                                                </Trigger>
                                                                                                                <EventTrigger RoutedEvent="Mouse.MouseEnter">
                                                                                                                    <BeginStoryboard>
                                                                                                                        <Storyboard>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="8"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                        </Storyboard>
                                                                                                                    </BeginStoryboard>
                                                                                                                </EventTrigger>
                                                                                                                <EventTrigger RoutedEvent="Mouse.MouseLeave">
                                                                                                                    <BeginStoryboard>
                                                                                                                        <Storyboard>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="2"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-2"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                        </Storyboard>
                                                                                                                    </BeginStoryboard>
                                                                                                                </EventTrigger>
                                                                                                            </ControlTemplate.Triggers>
                                                                                                        </ControlTemplate>
                                                                                                    </Setter.Value>
                                                                                                </Setter>
                                                                                            </Style>
                                                                                        </Thumb.Style>
                                                                                    </Thumb>
                                                                                </Track.Thumb>
                                                                            </Track>
                                                                        </hc:SimplePanel>
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Style.Triggers>
                                                                <Trigger Property="Orientation" Value="Horizontal">
                                                                    <Setter Property="Width" Value="Auto"/>
                                                                    <Setter Property="MinWidth" Value="0"/>
                                                                    <Setter Property="Height" Value="8"/>
                                                                    <Setter Property="MinHeight" Value="8"/>
                                                                    <Setter Property="BorderThickness" Value="0,1"/>
                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="{x:Type ScrollBar}">
                                                                                <hc:SimplePanel x:Name="Bg" SnapsToDevicePixels="True">
                                                                                    <Border Background="{TemplateBinding Background}"/>
                                                                                    <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}">
                                                                                        <Track.DecreaseRepeatButton>
                                                                                            <RepeatButton Command="ScrollBar.PageLeftCommand">
                                                                                                <RepeatButton.Style>
                                                                                                    <Style TargetType="{x:Type RepeatButton}">
                                                                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                                                        <Setter Property="Background" Value="Transparent"/>
                                                                                                        <Setter Property="Focusable" Value="False"/>
                                                                                                        <Setter Property="IsTabStop" Value="False"/>
                                                                                                        <Setter Property="Template">
                                                                                                            <Setter.Value>
                                                                                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                                                                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                                                                                </ControlTemplate>
                                                                                                            </Setter.Value>
                                                                                                        </Setter>
                                                                                                    </Style>
                                                                                                </RepeatButton.Style>
                                                                                            </RepeatButton>
                                                                                        </Track.DecreaseRepeatButton>
                                                                                        <Track.IncreaseRepeatButton>
                                                                                            <RepeatButton Command="ScrollBar.PageRightCommand">
                                                                                                <RepeatButton.Style>
                                                                                                    <Style TargetType="{x:Type RepeatButton}">
                                                                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                                                        <Setter Property="Background" Value="Transparent"/>
                                                                                                        <Setter Property="Focusable" Value="False"/>
                                                                                                        <Setter Property="IsTabStop" Value="False"/>
                                                                                                        <Setter Property="Template">
                                                                                                            <Setter.Value>
                                                                                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                                                                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                                                                                </ControlTemplate>
                                                                                                            </Setter.Value>
                                                                                                        </Setter>
                                                                                                    </Style>
                                                                                                </RepeatButton.Style>
                                                                                            </RepeatButton>
                                                                                        </Track.IncreaseRepeatButton>
                                                                                        <Track.Thumb>
                                                                                            <Thumb Background="{TemplateBinding Foreground}">
                                                                                                <Thumb.Style>
                                                                                                    <Style TargetType="{x:Type Thumb}">
                                                                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                                                        <Setter Property="IsTabStop" Value="False"/>
                                                                                                        <Setter Property="Template">
                                                                                                            <Setter.Value>
                                                                                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                                                                                    <ControlTemplate.Resources>
                                                                                                                        <Storyboard x:Key="Storyboard2">
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="2"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-2"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                        </Storyboard>
                                                                                                                        <Storyboard x:Key="Storyboard1">
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="8"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                        </Storyboard>
                                                                                                                    </ControlTemplate.Resources>
                                                                                                                    <Border Background="Transparent" Height="{TemplateBinding Height}">
                                                                                                                        <Rectangle x:Name="rectangle" Fill="{TemplateBinding Background}" Height="2" RadiusY="1" RadiusX="1" SnapsToDevicePixels="True" VerticalAlignment="Bottom" Width="{TemplateBinding Width}">
                                                                                                                            <Rectangle.RenderTransform>
                                                                                                                                <TransformGroup>
                                                                                                                                    <TranslateTransform Y="-2"/>
                                                                                                                                </TransformGroup>
                                                                                                                            </Rectangle.RenderTransform>
                                                                                                                        </Rectangle>
                                                                                                                    </Border>
                                                                                                                    <ControlTemplate.Triggers>
                                                                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                                                                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource SecondaryTextBrush}"/>
                                                                                                                        </Trigger>
                                                                                                                        <Trigger Property="IsDragging" Value="True">
                                                                                                                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource PrimaryTextBrush}"/>
                                                                                                                        </Trigger>
                                                                                                                        <EventTrigger RoutedEvent="Mouse.MouseEnter">
                                                                                                                            <BeginStoryboard>
                                                                                                                                <Storyboard>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="8"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                </Storyboard>
                                                                                                                            </BeginStoryboard>
                                                                                                                        </EventTrigger>
                                                                                                                        <EventTrigger RoutedEvent="Mouse.MouseLeave">
                                                                                                                            <BeginStoryboard>
                                                                                                                                <Storyboard>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="2"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-2"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                </Storyboard>
                                                                                                                            </BeginStoryboard>
                                                                                                                        </EventTrigger>
                                                                                                                    </ControlTemplate.Triggers>
                                                                                                                </ControlTemplate>
                                                                                                            </Setter.Value>
                                                                                                        </Setter>
                                                                                                    </Style>
                                                                                                </Thumb.Style>
                                                                                            </Thumb>
                                                                                        </Track.Thumb>
                                                                                    </Track>
                                                                                </hc:SimplePanel>
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ScrollBar.Style>
                                                </ScrollBar>
                                                <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}">
                                                    <ScrollBar.Style>
                                                        <Style TargetType="{x:Type ScrollBar}">
                                                            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
                                                            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                            <Setter Property="Background" Value="Transparent"/>
                                                            <Setter Property="Focusable" Value="False"/>
                                                            <Setter Property="BorderThickness" Value="0"/>
                                                            <Setter Property="Width" Value="8"/>
                                                            <Setter Property="MinWidth" Value="8"/>
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                                                                        <hc:SimplePanel x:Name="Bg" SnapsToDevicePixels="True">
                                                                            <Border Background="{TemplateBinding Background}"/>
                                                                            <Track x:Name="PART_Track" IsDirectionReversed="True" IsEnabled="{TemplateBinding IsMouseOver}">
                                                                                <Track.DecreaseRepeatButton>
                                                                                    <RepeatButton Command="ScrollBar.PageUpCommand">
                                                                                        <RepeatButton.Style>
                                                                                            <Style TargetType="{x:Type RepeatButton}">
                                                                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                                                <Setter Property="Background" Value="Transparent"/>
                                                                                                <Setter Property="Focusable" Value="False"/>
                                                                                                <Setter Property="IsTabStop" Value="False"/>
                                                                                                <Setter Property="Template">
                                                                                                    <Setter.Value>
                                                                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                                                            <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                                                                        </ControlTemplate>
                                                                                                    </Setter.Value>
                                                                                                </Setter>
                                                                                            </Style>
                                                                                        </RepeatButton.Style>
                                                                                    </RepeatButton>
                                                                                </Track.DecreaseRepeatButton>
                                                                                <Track.IncreaseRepeatButton>
                                                                                    <RepeatButton Command="ScrollBar.PageDownCommand">
                                                                                        <RepeatButton.Style>
                                                                                            <Style TargetType="{x:Type RepeatButton}">
                                                                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                                                <Setter Property="Background" Value="Transparent"/>
                                                                                                <Setter Property="Focusable" Value="False"/>
                                                                                                <Setter Property="IsTabStop" Value="False"/>
                                                                                                <Setter Property="Template">
                                                                                                    <Setter.Value>
                                                                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                                                            <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                                                                        </ControlTemplate>
                                                                                                    </Setter.Value>
                                                                                                </Setter>
                                                                                            </Style>
                                                                                        </RepeatButton.Style>
                                                                                    </RepeatButton>
                                                                                </Track.IncreaseRepeatButton>
                                                                                <Track.Thumb>
                                                                                    <Thumb Background="{TemplateBinding Foreground}">
                                                                                        <Thumb.Style>
                                                                                            <Style TargetType="{x:Type Thumb}">
                                                                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                                                <Setter Property="IsTabStop" Value="False"/>
                                                                                                <Setter Property="Template">
                                                                                                    <Setter.Value>
                                                                                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                                                                                            <ControlTemplate.Resources>
                                                                                                                <Storyboard x:Key="Storyboard2">
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="2"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-2"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                                <Storyboard x:Key="Storyboard1">
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="8"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                </Storyboard>
                                                                                                            </ControlTemplate.Resources>
                                                                                                            <Border Background="Transparent" Width="{TemplateBinding Width}">
                                                                                                                <Rectangle x:Name="rectangle" Fill="{TemplateBinding Background}" HorizontalAlignment="Right" Height="{TemplateBinding Height}" RadiusY="1" RadiusX="1" SnapsToDevicePixels="True" Width="2">
                                                                                                                    <Rectangle.RenderTransform>
                                                                                                                        <TransformGroup>
                                                                                                                            <TranslateTransform X="-2"/>
                                                                                                                        </TransformGroup>
                                                                                                                    </Rectangle.RenderTransform>
                                                                                                                </Rectangle>
                                                                                                            </Border>
                                                                                                            <ControlTemplate.Triggers>
                                                                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                                                                    <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource SecondaryTextBrush}"/>
                                                                                                                </Trigger>
                                                                                                                <Trigger Property="IsDragging" Value="True">
                                                                                                                    <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource PrimaryTextBrush}"/>
                                                                                                                </Trigger>
                                                                                                                <EventTrigger RoutedEvent="Mouse.MouseEnter">
                                                                                                                    <BeginStoryboard>
                                                                                                                        <Storyboard>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="8"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                        </Storyboard>
                                                                                                                    </BeginStoryboard>
                                                                                                                </EventTrigger>
                                                                                                                <EventTrigger RoutedEvent="Mouse.MouseLeave">
                                                                                                                    <BeginStoryboard>
                                                                                                                        <Storyboard>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="2"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-2"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                        </Storyboard>
                                                                                                                    </BeginStoryboard>
                                                                                                                </EventTrigger>
                                                                                                            </ControlTemplate.Triggers>
                                                                                                        </ControlTemplate>
                                                                                                    </Setter.Value>
                                                                                                </Setter>
                                                                                            </Style>
                                                                                        </Thumb.Style>
                                                                                    </Thumb>
                                                                                </Track.Thumb>
                                                                            </Track>
                                                                        </hc:SimplePanel>
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Style.Triggers>
                                                                <Trigger Property="Orientation" Value="Horizontal">
                                                                    <Setter Property="Width" Value="Auto"/>
                                                                    <Setter Property="MinWidth" Value="0"/>
                                                                    <Setter Property="Height" Value="8"/>
                                                                    <Setter Property="MinHeight" Value="8"/>
                                                                    <Setter Property="BorderThickness" Value="0,1"/>
                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="{x:Type ScrollBar}">
                                                                                <hc:SimplePanel x:Name="Bg" SnapsToDevicePixels="True">
                                                                                    <Border Background="{TemplateBinding Background}"/>
                                                                                    <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}">
                                                                                        <Track.DecreaseRepeatButton>
                                                                                            <RepeatButton Command="ScrollBar.PageLeftCommand">
                                                                                                <RepeatButton.Style>
                                                                                                    <Style TargetType="{x:Type RepeatButton}">
                                                                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                                                        <Setter Property="Background" Value="Transparent"/>
                                                                                                        <Setter Property="Focusable" Value="False"/>
                                                                                                        <Setter Property="IsTabStop" Value="False"/>
                                                                                                        <Setter Property="Template">
                                                                                                            <Setter.Value>
                                                                                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                                                                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                                                                                </ControlTemplate>
                                                                                                            </Setter.Value>
                                                                                                        </Setter>
                                                                                                    </Style>
                                                                                                </RepeatButton.Style>
                                                                                            </RepeatButton>
                                                                                        </Track.DecreaseRepeatButton>
                                                                                        <Track.IncreaseRepeatButton>
                                                                                            <RepeatButton Command="ScrollBar.PageRightCommand">
                                                                                                <RepeatButton.Style>
                                                                                                    <Style TargetType="{x:Type RepeatButton}">
                                                                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                                                        <Setter Property="Background" Value="Transparent"/>
                                                                                                        <Setter Property="Focusable" Value="False"/>
                                                                                                        <Setter Property="IsTabStop" Value="False"/>
                                                                                                        <Setter Property="Template">
                                                                                                            <Setter.Value>
                                                                                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                                                                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                                                                                </ControlTemplate>
                                                                                                            </Setter.Value>
                                                                                                        </Setter>
                                                                                                    </Style>
                                                                                                </RepeatButton.Style>
                                                                                            </RepeatButton>
                                                                                        </Track.IncreaseRepeatButton>
                                                                                        <Track.Thumb>
                                                                                            <Thumb Background="{TemplateBinding Foreground}">
                                                                                                <Thumb.Style>
                                                                                                    <Style TargetType="{x:Type Thumb}">
                                                                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                                                        <Setter Property="IsTabStop" Value="False"/>
                                                                                                        <Setter Property="Template">
                                                                                                            <Setter.Value>
                                                                                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                                                                                    <ControlTemplate.Resources>
                                                                                                                        <Storyboard x:Key="Storyboard2">
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="2"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-2"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                        </Storyboard>
                                                                                                                        <Storyboard x:Key="Storyboard1">
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="8"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                                                                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                                                                                            </DoubleAnimationUsingKeyFrames>
                                                                                                                        </Storyboard>
                                                                                                                    </ControlTemplate.Resources>
                                                                                                                    <Border Background="Transparent" Height="{TemplateBinding Height}">
                                                                                                                        <Rectangle x:Name="rectangle" Fill="{TemplateBinding Background}" Height="2" RadiusY="1" RadiusX="1" SnapsToDevicePixels="True" VerticalAlignment="Bottom" Width="{TemplateBinding Width}">
                                                                                                                            <Rectangle.RenderTransform>
                                                                                                                                <TransformGroup>
                                                                                                                                    <TranslateTransform Y="-2"/>
                                                                                                                                </TransformGroup>
                                                                                                                            </Rectangle.RenderTransform>
                                                                                                                        </Rectangle>
                                                                                                                    </Border>
                                                                                                                    <ControlTemplate.Triggers>
                                                                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                                                                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource SecondaryTextBrush}"/>
                                                                                                                        </Trigger>
                                                                                                                        <Trigger Property="IsDragging" Value="True">
                                                                                                                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource PrimaryTextBrush}"/>
                                                                                                                        </Trigger>
                                                                                                                        <EventTrigger RoutedEvent="Mouse.MouseEnter">
                                                                                                                            <BeginStoryboard>
                                                                                                                                <Storyboard>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="8"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="4"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                </Storyboard>
                                                                                                                            </BeginStoryboard>
                                                                                                                        </EventTrigger>
                                                                                                                        <EventTrigger RoutedEvent="Mouse.MouseLeave">
                                                                                                                            <BeginStoryboard>
                                                                                                                                <Storyboard>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="2"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                                                                                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-2"/>
                                                                                                                                    </DoubleAnimationUsingKeyFrames>
                                                                                                                                </Storyboard>
                                                                                                                            </BeginStoryboard>
                                                                                                                        </EventTrigger>
                                                                                                                    </ControlTemplate.Triggers>
                                                                                                                </ControlTemplate>
                                                                                                            </Setter.Value>
                                                                                                        </Setter>
                                                                                                    </Style>
                                                                                                </Thumb.Style>
                                                                                            </Thumb>
                                                                                        </Track.Thumb>
                                                                                    </Track>
                                                                                </hc:SimplePanel>
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ScrollBar.Style>
                                                </ScrollBar>
                                            </Grid>
                                        </ControlTemplate>
                                    </hc:ScrollViewer.Template>
                                    <ItemsPresenter/>
                                </hc:ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                            <hc:ToggleBlock.UnCheckedContent>
                                <hc:Empty/>
                            </hc:ToggleBlock.UnCheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="#FFF0F0F0"/>
                        </Trigger>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
                            <Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="True"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.BasedOn>
            <Style TargetType="{x:Type Control}">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle RadiusY="4" RadiusX="4">
                                            <Rectangle.Style>
                                                <Style TargetType="{x:Type Rectangle}">
                                                    <Setter Property="Margin" Value="-2"/>
                                                    <Setter Property="Opacity" Value="0.6"/>
                                                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                    <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                    <Setter Property="StrokeThickness" Value="2"/>
                                                    <Setter Property="StrokeDashArray" Value="1 1"/>
                                                </Style>
                                            </Rectangle.Style>
                                        </Rectangle>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel IsItemsHost="True"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TaskItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Opacity="0.6" SnapsToDevicePixels="True" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0,0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}" >
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition MinHeight="30"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <DockPanel LastChildFill="True" >
                                <DockPanel.Margin>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <hc:TreeViewItemMarginConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </DockPanel.Margin>
                                <ContentPresenter x:Name="PART_Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <ToggleButton x:Name="Expander" Margin="0,0,0,0" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Right">
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="Width" Value="16"/>
                                            <Setter Property="Height" Value="16"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border Background="Transparent" Height="16" Padding="4" Width="16">
                                                            <Path x:Name="ExpandPath" Data="M508.89325,762.93166 A65.039498,65.039498,0,0,1,462.47259,743.44582 L97.125746,371.00402 C71.982728,345.3697 72.372878,304.18717 98.007197,279.04415 123.65597,253.87946 164.81682,254.29851 189.96706,279.92561 L508.90047,605.05084 827.83388,279.92561 A65.025048,65.025048,0,0,1,920.6752,371.00402 L555.31391,743.44582 A65.025048,65.025048,0,0,1,508.89325,762.93166 z" Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TreeViewItem}}}" RenderTransformOrigin="0.5,0.5" Stretch="Uniform">
                                                                <Path.RenderTransform>
                                                                    <RotateTransform Angle="-90"/>
                                                                </Path.RenderTransform>
                                                            </Path>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                                                    <Setter.Value>
                                                                        <RotateTransform Angle="0"/>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                            </DockPanel>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" SourceName="Bd" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource PrimaryBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsSelectionActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource DarkDefaultBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FF6D6D6D"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.BasedOn>
            <Style TargetType="{x:Type Control}">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle RadiusY="4" RadiusX="4">
                                            <Rectangle.Style>
                                                <Style TargetType="{x:Type Rectangle}">
                                                    <Setter Property="Margin" Value="-2"/>
                                                    <Setter Property="Opacity" Value="0.6"/>
                                                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                    <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                    <Setter Property="StrokeThickness" Value="2"/>
                                                    <Setter Property="StrokeDashArray" Value="1 1"/>
                                                </Style>
                                            </Rectangle.Style>
                                        </Rectangle>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
    </Style>
    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.BasedOn>
            <Style TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <hc:SimplePanel>
                                <Border Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                    <StackPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                        <Path x:Name="PathMain" Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" Width="{TemplateBinding hc:IconElement.Width}"/>
                                        <ContentPresenter x:Name="ContentPresenterMain" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="6,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                    </StackPanel>
                                </Border>
                            </hc:SimplePanel>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Content" Value="{x:Null}">
                                    <Setter Property="Visibility" TargetName="ContentPresenterMain" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
                                    <Setter Property="Visibility" TargetName="PathMain" Value="Collapsed"/>
                                    <Setter Property="Margin" TargetName="ContentPresenterMain" Value="0"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.BasedOn>
                    <Style TargetType="{x:Type ButtonBase}">
                        <Setter Property="Height" Value="30"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                        <Setter Property="Padding" Value="10,6"/>
                        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Style.BasedOn>
                            <Style TargetType="{x:Type Control}">
                                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                <Setter Property="FontSize" Value="12"/>
                                <Setter Property="FocusVisualStyle">
                                    <Setter.Value>
                                        <Style>
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Rectangle RadiusY="4" RadiusX="4">
                                                            <Rectangle.Style>
                                                                <Style TargetType="{x:Type Rectangle}">
                                                                    <Setter Property="Margin" Value="-2"/>
                                                                    <Setter Property="Opacity" Value="0.6"/>
                                                                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                                    <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                                    <Setter Property="StrokeThickness" Value="2"/>
                                                                    <Setter Property="StrokeDashArray" Value="1 1"/>
                                                                </Style>
                                                            </Rectangle.Style>
                                                        </Rectangle>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Style.BasedOn>
                    </Style>
                </Style.BasedOn>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Opacity" Value="0.9"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Opacity" Value="0.6"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.4"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.BasedOn>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Setter Property="FocusVisualStyle">
                        <Setter.Value>
                            <Style>
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Rectangle Opacity="0.6" SnapsToDevicePixels="True" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                    <Setter Property="Padding" Value="10,0"/>
                    <Setter Property="MinHeight" Value="30"/>
                    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.BasedOn>
                        <Style TargetType="{x:Type Control}">
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                            <Setter Property="FontSize" Value="12"/>
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle RadiusY="4" RadiusX="4">
                                                        <Rectangle.Style>
                                                            <Style TargetType="{x:Type Rectangle}">
                                                                <Setter Property="Margin" Value="-2"/>
                                                                <Setter Property="Opacity" Value="0.6"/>
                                                                <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                                <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                                <Setter Property="StrokeThickness" Value="2"/>
                                                                <Setter Property="StrokeDashArray" Value="1 1"/>
                                                            </Style>
                                                        </Rectangle.Style>
                                                    </Rectangle>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Style.BasedOn>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4"/>
                        </Trigger>
                        <Trigger Property="hc:EdgeElement.ShowEdgeContent" Value="True">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                            <StackPanel Orientation="Horizontal">
                                                <ContentControl Content="{Binding (hc:EdgeElement.LeftContent), RelativeSource={RelativeSource TemplatedParent}}" Height="16" Width="16"/>
                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            </StackPanel>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <hc:ToggleBlock HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="Stretch">
                            <hc:ToggleBlock.CheckedContent>
                                <hc:ScrollViewer Focusable="False">
                                    <ItemsPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </hc:ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                            <hc:ToggleBlock.UnCheckedContent>
                                <hc:Empty/>
                            </hc:ToggleBlock.UnCheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Opacity="0.6" SnapsToDevicePixels="True" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="10,0"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.BasedOn>
            <Style TargetType="{x:Type Control}">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle RadiusY="4" RadiusX="4">
                                            <Rectangle.Style>
                                                <Style TargetType="{x:Type Rectangle}">
                                                    <Setter Property="Margin" Value="-2"/>
                                                    <Setter Property="Opacity" Value="0.6"/>
                                                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                    <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                    <Setter Property="StrokeThickness" Value="2"/>
                                                    <Setter Property="StrokeDashArray" Value="1 1"/>
                                                </Style>
                                            </Rectangle.Style>
                                        </Rectangle>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.4"/>
            </Trigger>
            <Trigger Property="hc:EdgeElement.ShowEdgeContent" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                <StackPanel Orientation="Horizontal">
                                    <ContentControl Content="{Binding (hc:EdgeElement.LeftContent), RelativeSource={RelativeSource TemplatedParent}}" Height="16" Width="16"/>
                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </StackPanel>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TabControlStyle" TargetType="{x:Type hc:TabControl}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:TabControl}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Grid x:Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="ColumnDefinition0"/>
                                <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Border BorderBrush="{DynamicResource BorderBrush}" BorderThickness="0,0,0,1" Background="{TemplateBinding Background}">
                                <hc:TabPanel x:Name="PART_HeaderPanel" Background="{DynamicResource SecondaryTextBrush}" HorizontalAlignment="Left" IsTabFillEnabled="{TemplateBinding IsTabFillEnabled}" IsItemsHost="True" Margin="0,0,-1,-1" MinHeight="{TemplateBinding TabItemHeight}" TabItemHeight="{TemplateBinding TabItemHeight}" TabItemWidth="{TemplateBinding TabItemWidth}" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                            </Border>
                            <Border x:Name="contentPanel" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                                <Border.Background>
                                    <ImageBrush ImageSource="pack://siteoforigin:,,,/Resourses/mandala.png" Stretch="Uniform"/>
                                </Border.Background>
                                <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <Border BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1,0,0,1" Background="{DynamicResource RegionBrush}" Grid.Column="0" HorizontalAlignment="Right" Margin="0,-1,0,0" Grid.Row="0" Visibility="{Binding Visibility, ElementName=PART_OverflowButton}">
                                <hc:ContextMenuToggleButton x:Name="PART_OverflowButton" hc:IconSwitchElement.GeometrySelected="M50.000001,0L100,51.262779 94.262627,57.141584 50.000001,11.767713 5.7373757,57.151686 0,51.27288z" hc:IconElement.Geometry="M512,801.6896L5.12,282.0096 63.2832,222.4128 512,682.3936 960.7168,222.3104 1018.88,281.9072 512,801.6896z" Menu="{x:Null}" Visibility="Collapsed">
                                    <hc:ContextMenuToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                                            <ContentControl Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                                                <Path x:Name="PathIcon" Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="{TemplateBinding hc:IconElement.Width}"/>
                                                            </ContentControl>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="Data" TargetName="PathIcon" Value="{Binding (hc:IconSwitchElement.GeometrySelected), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.BasedOn>
                                                <Style TargetType="{x:Type ToggleButton}">
                                                    <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                                                    <Setter Property="Width" Value="30"/>
                                                    <Setter Property="Height" Value="30"/>
                                                    <Setter Property="Padding" Value="8"/>
                                                    <Setter Property="hc:IconElement.Geometry" Value="{x:Null}"/>
                                                    <Setter Property="hc:IconSwitchElement.GeometrySelected" Value="{x:Null}"/>
                                                    <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
                                                    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                                                    <Setter Property="BorderThickness" Value="0"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                <hc:SimplePanel>
                                                                    <Border Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                                                        <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                            <Path x:Name="PathIcon" Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" Width="{TemplateBinding hc:IconElement.Width}"/>
                                                                        </ContentControl>
                                                                    </Border>
                                                                    <Border x:Name="BorderChecked" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="4" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed"/>
                                                                </hc:SimplePanel>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsChecked" Value="True">
                                                                        <Setter Property="Data" TargetName="PathIcon" Value="{Binding (hc:IconSwitchElement.GeometrySelected), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.BasedOn>
                                                        <Style TargetType="{x:Type Control}">
                                                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                            <Setter Property="FontSize" Value="12"/>
                                                            <Setter Property="FocusVisualStyle">
                                                                <Setter.Value>
                                                                    <Style>
                                                                        <Setter Property="Control.Template">
                                                                            <Setter.Value>
                                                                                <ControlTemplate>
                                                                                    <Rectangle RadiusY="4" RadiusX="4">
                                                                                        <Rectangle.Style>
                                                                                            <Style TargetType="{x:Type Rectangle}">
                                                                                                <Setter Property="Margin" Value="-2"/>
                                                                                                <Setter Property="Opacity" Value="0.6"/>
                                                                                                <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                                                                <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                                                                <Setter Property="StrokeThickness" Value="2"/>
                                                                                                <Setter Property="StrokeDashArray" Value="1 1"/>
                                                                                            </Style>
                                                                                        </Rectangle.Style>
                                                                                    </Rectangle>
                                                                                </ControlTemplate>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </Style>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Style>
                                                    </Style.BasedOn>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Opacity" Value="0.9"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Opacity" Value="0.6"/>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Opacity" Value="0.4"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Style.BasedOn>
                                        </Style>
                                    </hc:ContextMenuToggleButton.Style>
                                </hc:ContextMenuToggleButton>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsScrollable" Value="True"/>
                    <Condition Property="IsTabFillEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type hc:TabControl}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                <Grid x:Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Border BorderBrush="{DynamicResource BorderBrush}" BorderThickness="0,0,1,1" Background="{DynamicResource RegionBrush}" Grid.Column="0" HorizontalAlignment="Left" Margin="0,-1,0,0" Grid.Row="0" Panel.ZIndex="2">
                                        <Border.CacheMode>
                                            <BitmapCache SnapsToDevicePixels="True"/>
                                        </Border.CacheMode>
                                        <Border.Visibility>
                                            <TemplateBinding Property="ShowScrollButton">
                                                <TemplateBinding.Converter>
                                                    <BooleanToVisibilityConverter/>
                                                </TemplateBinding.Converter>
                                            </TemplateBinding>
                                        </Border.Visibility>
                                        <RepeatButton x:Name="PART_ScrollButtonLeft" Background="{DynamicResource SecondaryRegionBrush}" Foreground="{DynamicResource PrimaryTextBrush}" Focusable="False" hc:IconElement.Geometry="M394.24,512L683.52,248.32C693.76,238.08 693.76,222.72 683.52,212.48 673.28,202.24 657.92,202.24 647.68,212.48L340.48,491.52C335.36,496.64 332.8,504.32 332.8,512 332.8,519.68 335.36,527.36 340.48,532.48L647.68,811.52C657.92,821.76 673.28,821.76 683.52,811.52 693.76,801.28 693.76,785.92 683.52,775.68L394.24,512z" Padding="8">
                                            <RepeatButton.Style>
                                                <Style TargetType="{x:Type RepeatButton}">
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="BorderBrush" Value="Transparent"/>
                                                    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                                                    <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                        <Path Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" Width="{TemplateBinding hc:IconElement.Width}"/>
                                                                    </ContentControl>
                                                                </Border>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.BasedOn>
                                                        <Style TargetType="{x:Type RepeatButton}">
                                                            <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                                                            <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                        <hc:SimplePanel>
                                                                            <Border Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                                                                <StackPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                                    <Path x:Name="PathMain" Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" Width="{TemplateBinding hc:IconElement.Width}"/>
                                                                                    <ContentPresenter x:Name="ContentPresenterMain" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="6,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                                                                </StackPanel>
                                                                            </Border>
                                                                        </hc:SimplePanel>
                                                                        <ControlTemplate.Triggers>
                                                                            <Trigger Property="Content" Value="{x:Null}">
                                                                                <Setter Property="Visibility" TargetName="ContentPresenterMain" Value="Collapsed"/>
                                                                            </Trigger>
                                                                            <Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
                                                                                <Setter Property="Visibility" TargetName="PathMain" Value="Collapsed"/>
                                                                                <Setter Property="Margin" TargetName="ContentPresenterMain" Value="0"/>
                                                                            </Trigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Style.BasedOn>
                                                                <Style TargetType="{x:Type ButtonBase}">
                                                                    <Setter Property="Height" Value="30"/>
                                                                    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                                                                    <Setter Property="Padding" Value="10,6"/>
                                                                    <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                                                                    <Setter Property="BorderThickness" Value="0"/>
                                                                    <Setter Property="HorizontalAlignment" Value="Center"/>
                                                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                                    <Style.BasedOn>
                                                                        <Style TargetType="{x:Type Control}">
                                                                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                                            <Setter Property="FontSize" Value="12"/>
                                                                            <Setter Property="FocusVisualStyle">
                                                                                <Setter.Value>
                                                                                    <Style>
                                                                                        <Setter Property="Control.Template">
                                                                                            <Setter.Value>
                                                                                                <ControlTemplate>
                                                                                                    <Rectangle RadiusY="4" RadiusX="4">
                                                                                                        <Rectangle.Style>
                                                                                                            <Style TargetType="{x:Type Rectangle}">
                                                                                                                <Setter Property="Margin" Value="-2"/>
                                                                                                                <Setter Property="Opacity" Value="0.6"/>
                                                                                                                <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                                                                                <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                                                                                <Setter Property="StrokeThickness" Value="2"/>
                                                                                                                <Setter Property="StrokeDashArray" Value="1 1"/>
                                                                                                            </Style>
                                                                                                        </Rectangle.Style>
                                                                                                    </Rectangle>
                                                                                                </ControlTemplate>
                                                                                            </Setter.Value>
                                                                                        </Setter>
                                                                                    </Style>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                        </Style>
                                                                    </Style.BasedOn>
                                                                </Style>
                                                            </Style.BasedOn>
                                                            <Style.Triggers>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Opacity" Value="0.9"/>
                                                                </Trigger>
                                                                <Trigger Property="IsPressed" Value="True">
                                                                    <Setter Property="Opacity" Value="0.6"/>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Opacity" Value="0.4"/>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Style.BasedOn>
                                                </Style>
                                            </RepeatButton.Style>
                                        </RepeatButton>
                                    </Border>
                                    <hc:ScrollViewer x:Name="PART_OverflowScrollviewer" CanMouseWheel="True" Grid.Column="1" HorizontalScrollBarVisibility="Hidden" IsInertiaEnabled="True" IsDeferredScrollingEnabled="True" Orientation="Horizontal" Grid.Row="0">
                                        <Border x:Name="PART_HeaderBorder" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="0,0,0,1" Background="{TemplateBinding Background}">
                                            <hc:TabPanel x:Name="PART_HeaderPanel" Background="{DynamicResource SecondaryTextBrush}" HorizontalAlignment="Left" IsTabFillEnabled="{TemplateBinding IsTabFillEnabled}" IsItemsHost="True" Margin="0,0,-1,-1" MinHeight="{TemplateBinding TabItemHeight}" TabItemHeight="{TemplateBinding TabItemHeight}" TabItemWidth="{TemplateBinding TabItemWidth}" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                                        </Border>
                                    </hc:ScrollViewer>
                                    <Border BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1,0,0,1" Background="{DynamicResource RegionBrush}" Grid.Column="2" HorizontalAlignment="Right" Margin="0,-1,0,0" Grid.Row="0">
                                        <Border.CacheMode>
                                            <BitmapCache SnapsToDevicePixels="True"/>
                                        </Border.CacheMode>
                                        <StackPanel Orientation="Horizontal">
                                            <RepeatButton x:Name="PART_ScrollButtonRight" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource SecondaryRegionBrush}" Foreground="{DynamicResource PrimaryTextBrush}" Focusable="False" hc:IconElement.Geometry="M4.1666641,0C5.2083321,0,6.25,0.41666794,7.0833321,1.25L57.083331,46.666664C57.916664,47.499998 58.33333,48.749998 58.333329,49.999998 58.33333,51.249997 57.916664,52.499997 57.083331,53.333331L7.0833321,98.749996C5.4166641,100.41666 2.9166641,100.41666 1.2499962,98.749996 -0.41666794,97.083328 -0.41666794,94.583328 1.2499962,92.916664L48.333331,49.999998 1.2499962,7.0833321C-0.41666794,5.4166641 -0.41666794,2.9166641 1.2499962,1.25 2.0833282,0.41666794 3.1249962,0 4.1666641,0z" Padding="8">
                                                <RepeatButton.Style>
                                                    <Style TargetType="{x:Type RepeatButton}">
                                                        <Setter Property="Background" Value="Transparent"/>
                                                        <Setter Property="BorderBrush" Value="Transparent"/>
                                                        <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                                                        <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                            <Path Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" Width="{TemplateBinding hc:IconElement.Width}"/>
                                                                        </ContentControl>
                                                                    </Border>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Style.BasedOn>
                                                            <Style TargetType="{x:Type RepeatButton}">
                                                                <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                                                                <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                            <hc:SimplePanel>
                                                                                <Border Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                                                                    <StackPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                                        <Path x:Name="PathMain" Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" Width="{TemplateBinding hc:IconElement.Width}"/>
                                                                                        <ContentPresenter x:Name="ContentPresenterMain" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="6,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                                                                    </StackPanel>
                                                                                </Border>
                                                                            </hc:SimplePanel>
                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="Content" Value="{x:Null}">
                                                                                    <Setter Property="Visibility" TargetName="ContentPresenterMain" Value="Collapsed"/>
                                                                                </Trigger>
                                                                                <Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
                                                                                    <Setter Property="Visibility" TargetName="PathMain" Value="Collapsed"/>
                                                                                    <Setter Property="Margin" TargetName="ContentPresenterMain" Value="0"/>
                                                                                </Trigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Style.BasedOn>
                                                                    <Style TargetType="{x:Type ButtonBase}">
                                                                        <Setter Property="Height" Value="30"/>
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                                                                        <Setter Property="Padding" Value="10,6"/>
                                                                        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                                                                        <Setter Property="BorderThickness" Value="0"/>
                                                                        <Setter Property="HorizontalAlignment" Value="Center"/>
                                                                        <Setter Property="VerticalAlignment" Value="Center"/>
                                                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                                        <Style.BasedOn>
                                                                            <Style TargetType="{x:Type Control}">
                                                                                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                                                <Setter Property="FontSize" Value="12"/>
                                                                                <Setter Property="FocusVisualStyle">
                                                                                    <Setter.Value>
                                                                                        <Style>
                                                                                            <Setter Property="Control.Template">
                                                                                                <Setter.Value>
                                                                                                    <ControlTemplate>
                                                                                                        <Rectangle RadiusY="4" RadiusX="4">
                                                                                                            <Rectangle.Style>
                                                                                                                <Style TargetType="{x:Type Rectangle}">
                                                                                                                    <Setter Property="Margin" Value="-2"/>
                                                                                                                    <Setter Property="Opacity" Value="0.6"/>
                                                                                                                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                                                                                    <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                                                                                    <Setter Property="StrokeThickness" Value="2"/>
                                                                                                                    <Setter Property="StrokeDashArray" Value="1 1"/>
                                                                                                                </Style>
                                                                                                            </Rectangle.Style>
                                                                                                        </Rectangle>
                                                                                                    </ControlTemplate>
                                                                                                </Setter.Value>
                                                                                            </Setter>
                                                                                        </Style>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </Style.BasedOn>
                                                                    </Style>
                                                                </Style.BasedOn>
                                                                <Style.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Opacity" Value="0.9"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="Opacity" Value="0.6"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Opacity" Value="0.4"/>
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Style.BasedOn>
                                                    </Style>
                                                </RepeatButton.Style>
                                                <RepeatButton.Visibility>
                                                    <TemplateBinding Property="ShowScrollButton">
                                                        <TemplateBinding.Converter>
                                                            <BooleanToVisibilityConverter/>
                                                        </TemplateBinding.Converter>
                                                    </TemplateBinding>
                                                </RepeatButton.Visibility>
                                            </RepeatButton>
                                            <Border Background="{DynamicResource BorderBrush}" Visibility="{Binding Visibility, ElementName=PART_OverflowButton}" Width="1"/>
                                            <hc:ContextMenuToggleButton x:Name="PART_OverflowButton" hc:IconSwitchElement.GeometrySelected="M50.000001,0L100,51.262779 94.262627,57.141584 50.000001,11.767713 5.7373757,57.151686 0,51.27288z" hc:IconElement.Geometry="M512,801.6896L5.12,282.0096 63.2832,222.4128 512,682.3936 960.7168,222.3104 1018.88,281.9072 512,801.6896z" Menu="{x:Null}" Visibility="Collapsed">
                                                <hc:ContextMenuToggleButton.Style>
                                                    <Style TargetType="{x:Type ToggleButton}">
                                                        <Setter Property="Background" Value="Transparent"/>
                                                        <Setter Property="BorderBrush" Value="Transparent"/>
                                                        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                                                        <ContentControl Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                                                            <Path x:Name="PathIcon" Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="{TemplateBinding hc:IconElement.Width}"/>
                                                                        </ContentControl>
                                                                    </Border>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsChecked" Value="True">
                                                                            <Setter Property="Data" TargetName="PathIcon" Value="{Binding (hc:IconSwitchElement.GeometrySelected), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                        </Trigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Style.BasedOn>
                                                            <Style TargetType="{x:Type ToggleButton}">
                                                                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                                                                <Setter Property="Width" Value="30"/>
                                                                <Setter Property="Height" Value="30"/>
                                                                <Setter Property="Padding" Value="8"/>
                                                                <Setter Property="hc:IconElement.Geometry" Value="{x:Null}"/>
                                                                <Setter Property="hc:IconSwitchElement.GeometrySelected" Value="{x:Null}"/>
                                                                <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
                                                                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                                                                <Setter Property="BorderThickness" Value="0"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                            <hc:SimplePanel>
                                                                                <Border Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                                                                    <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                                        <Path x:Name="PathIcon" Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" Width="{TemplateBinding hc:IconElement.Width}"/>
                                                                                    </ContentControl>
                                                                                </Border>
                                                                                <Border x:Name="BorderChecked" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="4" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed"/>
                                                                            </hc:SimplePanel>
                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="IsChecked" Value="True">
                                                                                    <Setter Property="Data" TargetName="PathIcon" Value="{Binding (hc:IconSwitchElement.GeometrySelected), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                                </Trigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Style.BasedOn>
                                                                    <Style TargetType="{x:Type Control}">
                                                                        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                                        <Setter Property="FontSize" Value="12"/>
                                                                        <Setter Property="FocusVisualStyle">
                                                                            <Setter.Value>
                                                                                <Style>
                                                                                    <Setter Property="Control.Template">
                                                                                        <Setter.Value>
                                                                                            <ControlTemplate>
                                                                                                <Rectangle RadiusY="4" RadiusX="4">
                                                                                                    <Rectangle.Style>
                                                                                                        <Style TargetType="{x:Type Rectangle}">
                                                                                                            <Setter Property="Margin" Value="-2"/>
                                                                                                            <Setter Property="Opacity" Value="0.6"/>
                                                                                                            <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                                                                            <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                                                                            <Setter Property="StrokeThickness" Value="2"/>
                                                                                                            <Setter Property="StrokeDashArray" Value="1 1"/>
                                                                                                        </Style>
                                                                                                    </Rectangle.Style>
                                                                                                </Rectangle>
                                                                                            </ControlTemplate>
                                                                                        </Setter.Value>
                                                                                    </Setter>
                                                                                </Style>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </Style>
                                                                </Style.BasedOn>
                                                                <Style.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Opacity" Value="0.9"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="Opacity" Value="0.6"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Opacity" Value="0.4"/>
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Style.BasedOn>
                                                    </Style>
                                                </hc:ContextMenuToggleButton.Style>
                                            </hc:ContextMenuToggleButton>
                                        </StackPanel>
                                    </Border>
                                    <Border x:Name="contentPanel" Background="{DynamicResource SecondaryRegionBrush}" Grid.ColumnSpan="3" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                                        <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
        </Style.Triggers>
    </Style>



</ResourceDictionary>